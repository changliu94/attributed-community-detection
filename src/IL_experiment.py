from src.IL import ML2
from src import utils
from sklearn.metrics.cluster import normalized_mutual_info_score, adjusted_rand_score
from time import time

# Read the graph
graph_paths = ['../data/toy_0.graph', '../data/toy_1.graph', '../data/toy_2.graph', '../data/toy_3.graph']
graphs_original = []  # store original networkx graph objects
partitions_gt = []  # store ground-truth partitions generated by DANCer

for g_path in graph_paths:
    print(g_path)
    graph, partition = utils.read_dancer_data(g_path)
    graphs_original.append(graph)
    partitions_gt.append(partition)


def fit_IL(graph):
    attributes = {}
    author_index = {}
    for n in graph:
        author_index[n] = n
        attr = graph.node[n]['attr']
        attr_IL = {}
        for i, attr_value in enumerate(attr):
            attr_IL[i] = attr_value
        attributes[n] = attr_IL

    return attributes, author_index


attributes_IL = None
print("std = 0.5")
# attribute redistribution 1
graphs_redist = []  # store graphs with redistributed node attribute
for i in range(4):
    g = graphs_original[i]
    partition = partitions_gt[i]
    graphs_redist.append(utils.redistribute_attribute(g, partition, 0.5, 19910420))
for i in range(4):
    g = graphs_redist[i]
    gt_p = partitions_gt[i]
    start = time()
    attributes_IL, author_index = fit_IL(g)
    IL = ML2(g, attributes_IL, author_index)
    part = IL.findPartition()
    end = time()
    print('nmi')
    print(normalized_mutual_info_score(gt_p.values(), part.values()))
    print('ari')
    print(adjusted_rand_score(gt_p.values(), part.values()))
    print("time:{}".format(end - start))


attributes_IL = None
print("std = 1.5")
# attribute redistribution 2
graphs_redist2 = []  # store graphs with redistributed node attribute
for i in range(4):
    g = graphs_original[i]
    partition = partitions_gt[i]
    graphs_redist2.append(utils.redistribute_attribute(g, partition, 1.5, 19910420))
for i in range(4):
    g = graphs_redist2[i]
    gt_p = partitions_gt[i]
    start = time()
    attributes_IL, author_index = fit_IL(g)
    IL = ML2(g, attributes_IL, author_index)
    part = IL.findPartition()
    end = time()
    print('nmi')
    print(normalized_mutual_info_score(gt_p.values(), part.values()))
    print('ari')
    print(adjusted_rand_score(gt_p.values(), part.values()))
    print("time:{}".format(end - start))


attributes_IL = None
print("no redistribution")
# no redistribution
for i in range(4):
    g = graphs_original[i]
    gt_p = partitions_gt[i]
    start = time()
    attributes_IL, author_index = fit_IL(g)
    IL = ML2(g, attributes_IL, author_index)
    part = IL.findPartition()
    end = time()
    print('nmi')
    print(normalized_mutual_info_score(gt_p.values(), part.values()))
    print('ari')
    print(adjusted_rand_score(gt_p.values(), part.values()))
    print("time:{}".format(end - start))
